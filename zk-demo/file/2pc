两阶段提交算法——2PC
两阶段提交——为了使基于分布式系统架构下的所有节点在进行事务处理过程中能够保持原子性和一致性而设计的一种算法，是一种一致性协议，用来保证分布式系统数据的一致性
将事务的提交过程分为两个阶段进行处理
阶段一：提交事务请求（投票阶段）
1、事务询问：协调者向所有事务参与者发送事务内容，询问是否可以执行事务提交操作，并开始等待各参与者的响应
2、执行事务：各参与者执行事务操作，并将redo和undo信息记录在事务日志中
3、各参与者向协调者反馈事务询问的响应：可以成功执行事务反馈Yes，否则反馈No
阶段二：执行事务提交
阶段二中协调者根据各参与者的反馈情况来决定最终是否可以进行事务提交操作，正常情况下，包含以下两种可能：
一、执行事务提交（所有参与者均反馈Yes）
1、发送提交请求：协调者向所有参与者发送Commit请求
2、事务提交：参与者接受到Commit请求后正式执行事务提交操作，完成提交后释放资源
3、反馈事务提交结果：完成事务提交后，参与者向协调者发送Ack消息
4、完成事务：协调者收到所有参与者的Ack消息后完成事务
二、中断事务（一个或以上的参与者反馈No）
1、发送回滚请求：协调者向所有参与者发送rollback请求
2、事务回滚：参与者利用事务日志中的undo信息执行回滚操作，完成回滚操作后释放资源
3、反馈事务回滚结果：参与者完成事务回滚操作后向协调者发送Ack消息
4、中断事务：协调者收到所有参与者的Ack消息后完成事务中断

小结：两阶段提交将一个事务分成了投票和执行两个阶段，核心是对每个事务都采用先尝试后提交的处理方式，因此两阶段提交可以看做一个强一致性的算法
优点：原理简单，实现方便
缺点：同步阻塞、单点问题、脑裂、太过保守
同步阻塞：在两阶段提交执行过程中，所有参与该事务操作的逻辑都处于阻塞状态，也就是说各个参与者在等待其他参与者响应的过程中，将无法进行其他操作
单点问题：协调者单点问题，协调者在执行事务提交的过程中出现问题的话，参与者将一直处于锁定事务资源的状态中，无法继续完成事务操作
数据不一致：协调者如果在发送Commit的过程中发生局部网络异常或者协调者自身崩溃，会造成已经收到Commit消息的参与者完成事务提交，没有收到Commit消息的参与者没有提交事务，从而造成数据不一致